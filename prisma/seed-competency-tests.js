const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function seedTestQuestions() {
  console.log('üå± === Rozpoczynam seedowanie rozszerzonych pyta≈Ñ testowych (32 pytania) ===');

  try {
    // Sprawd≈∫ r√≥≈ºne mo≈ºliwe ≈õcie≈ºki do pliku
    const possiblePaths = [
      path.join(process.cwd(), 'test-questions.json'),
      path.join(process.cwd(), 'data', 'test-questions.json'),
      path.join(process.cwd(), 'src', 'data', 'test-questions.json'),
      path.join(__dirname, '..', 'test-questions.json'),
      path.join(__dirname, '..', 'data', 'test-questions.json')
    ];

    let dataPath = null;
    for (const testPath of possiblePaths) {
      if (fs.existsSync(testPath)) {
        dataPath = testPath;
        console.log(`‚úÖ Znaleziono plik: ${testPath}`);
        break;
      } else {
        console.log(`‚ùå Nie znaleziono: ${testPath}`);
      }
    }

    if (!dataPath) {
      console.log(`
üö® B≈ÅƒÑD: Nie znaleziono pliku test-questions.json!

üí° ROZWIƒÑZANIE:
1. Skopiuj zawarto≈õƒá pliku "paste-6.txt" z dokument√≥w
2. Zapisz jako "test-questions.json" w g≈Ç√≥wnym katalogu projektu
3. Uruchom ponownie: npm run db:seed-tests
      `);
      
      // Fallback - u≈ºyj podstawowych pyta≈Ñ
      return await createBasicQuestions();
    }

    console.log(`üìÇ Czytam plik: ${dataPath}`);
    const rawData = fs.readFileSync(dataPath, 'utf-8');
    const data = JSON.parse(rawData);
    
    // Sprawd≈∫ strukturƒô danych
    if (!data.testQuestions || !Array.isArray(data.testQuestions)) {
      console.log(`
üö® B≈ÅƒÑD STRUKTURY: Plik JSON ma nieprawid≈ÇowƒÖ strukturƒô!
Znalezione klucze: ${Object.keys(data).join(', ')}
      `);
      return await createBasicQuestions();
    }

    const { testQuestions } = data;
    console.log(`üìä Znaleziono ${testQuestions.length} pyta≈Ñ do za≈Çadowania`);

    // Sprawd≈∫ obecnƒÖ liczbƒô pyta≈Ñ w bazie
    const existingCount = await prisma.testQuestion.count();
    console.log(`üìã Obecnie w bazie: ${existingCount} pyta≈Ñ`);

    if (existingCount > 0) {
      console.log('üóëÔ∏è Usuwam stare pytania...');
      const deleted = await prisma.testQuestion.deleteMany({});
      console.log(`‚úÖ Usuniƒôto ${deleted.count} starych pyta≈Ñ`);
    }

    // Dodaj nowe pytania do bazy
    console.log('üíæ Dodajƒô nowe pytania do bazy...');
    let createdCount = 0;
    let errorCount = 0;

    for (const [index, question] of testQuestions.entries()) {
      try {
        // Sprawd≈∫ czy questionType jest prawid≈Çowy
        const validTypes = ['SINGLE_CHOICE', 'MULTIPLE_CHOICE', 'SLIDER', 'RANKING', 'TEXT_SHORT'];
        if (!validTypes.includes(question.questionType)) {
          throw new Error(`Nieprawid≈Çowy questionType: ${question.questionType}`);
        }

        // Sprawd≈∫ czy category jest prawid≈Çowa
        const validCategories = ['INTERESTS', 'COMPETENCIES', 'VALUES', 'ENVIRONMENT', 'ASPIRATIONS'];
        if (!validCategories.includes(question.category)) {
          throw new Error(`Nieprawid≈Çowa category: ${question.category}`);
        }

        await prisma.testQuestion.create({
          data: {
            id: question.id,
            questionText: question.questionText,
            questionType: question.questionType,
            category: question.category,
            subcategory: question.subcategory || null,
            options: question.options || null,
            hollandDimension: question.hollandDimension || null,
            competencyArea: question.competencyArea || null,
            orderIndex: question.orderIndex,
            isActive: true
          }
        });
        
        createdCount++;
        console.log(`‚úÖ [${index + 1}/${testQuestions.length}] Dodano: ${question.id}`);
        
      } catch (error) {
        errorCount++;
        console.error(`‚ùå [${index + 1}/${testQuestions.length}] B≈ÇƒÖd przy ${question.id}: ${error.message}`);
      }
    }

    console.log('\nüéâ === SEEDOWANIE ZAKO≈ÉCZONE ===');
    console.log(`‚úÖ Pomy≈õlnie utworzono: ${createdCount} pyta≈Ñ`);
    console.log(`‚ùå B≈Çƒôdy: ${errorCount}`);
    
    return { success: true, created: createdCount, errors: errorCount };

  } catch (error) {
    console.error('\nüí• === KRYTYCZNY B≈ÅƒÑD SEEDOWANIA ===');
    console.error('‚ùå Szczeg√≥≈Çy:', error.message);
    
    // Fallback - utw√≥rz podstawowe pytania
    console.log('üîÑ Pr√≥bujƒô utworzyƒá podstawowe pytania...');
    return await createBasicQuestions();
  }
}

// Funkcja fallback z podstawowymi pytaniami
async function createBasicQuestions() {
  console.log('üìù Tworzƒô podstawowe pytania testowe...');
  
  const basicQuestions = [
    {
      id: "q001",
      questionText: "Kt√≥ra z tych czynno≈õci sprawia≈Çaby Ci najwiƒôkszƒÖ satysfakcjƒô w pracy?",
      questionType: "SINGLE_CHOICE",
      category: "INTERESTS",
      subcategory: "holland_primary",
      hollandDimension: "mixed",
      competencyArea: "career_interests",
      orderIndex: 1,
      options: [
        {"value": "R", "text": "Budowanie i monta≈º konstrukcji w≈Çasnymi rƒôkami", "hollandCode": "R"},
        {"value": "I", "text": "Analizowanie plan√≥w budowlanych i rozwiƒÖzywanie problem√≥w technicznych", "hollandCode": "I"},
        {"value": "A", "text": "Projektowanie wyglƒÖdu i estetyki budynk√≥w", "hollandCode": "A"},
        {"value": "S", "text": "Szkolenie nowych pracownik√≥w na budowie", "hollandCode": "S"},
        {"value": "E", "text": "ZarzƒÖdzanie ca≈Çym projektem budowlanym", "hollandCode": "E"},
        {"value": "C", "text": "Prowadzenie dokumentacji i kontroli jako≈õci", "hollandCode": "C"}
      ]
    },
    {
      id: "q002",
      questionText: "W jakim ≈õrodowisku pracy czu≈Çby≈õ siƒô najlepiej?",
      questionType: "SINGLE_CHOICE",
      category: "ENVIRONMENT",
      subcategory: "work_location",
      competencyArea: "environmental_preference",
      orderIndex: 2,
      options: [
        {"value": "outdoor", "text": "Na placu budowy, na ≈õwie≈ºym powietrzu"},
        {"value": "workshop", "text": "W warsztacie lub hali produkcyjnej"},
        {"value": "office", "text": "W biurze projektowym z komputerem"},
        {"value": "mixed", "text": "Po≈ÇƒÖczenie biura i terenu"},
        {"value": "client_sites", "text": "U klient√≥w, w r√≥≈ºnych lokalizacjach"}
      ]
    },
    {
      id: "q003",
      questionText: "Jak oceniasz swoje umiejƒôtno≈õci techniczne?",
      questionType: "SLIDER",
      category: "COMPETENCIES",
      subcategory: "technical_skills",
      competencyArea: "technical_competence",
      orderIndex: 3,
      options: {
        "min": 1,
        "max": 10,
        "labels": {
          "1": "PoczƒÖtkujƒÖcy",
          "5": "≈öredni poziom", 
          "10": "Ekspert"
        },
        "description": "Oce≈Ñ swoje og√≥lne umiejƒôtno≈õci techniczne w pracy z narzƒôdziami i maszynami"
      }
    },
    {
      id: "q004",
      questionText: "Co motywuje Ciƒô najbardziej w pracy?",
      questionType: "RANKING",
      category: "VALUES",
      subcategory: "work_motivators",
      competencyArea: "motivation",
      orderIndex: 4,
      options: [
        {"value": "money", "text": "Wysokie zarobki"},
        {"value": "stability", "text": "Stabilno≈õƒá zatrudnienia"},
        {"value": "growth", "text": "Mo≈ºliwo≈õci rozwoju"},
        {"value": "recognition", "text": "Uznanie i szacunek"},
        {"value": "autonomy", "text": "Niezale≈ºno≈õƒá w dzia≈Çaniu"},
        {"value": "teamwork", "text": "Praca w zespole"}
      ]
    },
    {
      id: "q005",
      questionText: "Jakie sƒÖ Twoje g≈Ç√≥wne cele zawodowe?",
      questionType: "SINGLE_CHOICE",
      category: "ASPIRATIONS",
      subcategory: "career_goals",
      competencyArea: "ambition",
      orderIndex: 5,
      options: [
        {"value": "specialist", "text": "Zostaƒá ekspertem w swojej dziedzinie"},
        {"value": "manager", "text": "Awansowaƒá na stanowisko kierownicze"},
        {"value": "entrepreneur", "text": "Za≈Ço≈ºyƒá w≈ÇasnƒÖ firmƒô budowlanƒÖ"},
        {"value": "stable", "text": "Znale≈∫ƒá stabilnƒÖ, dobrze p≈ÇatnƒÖ pracƒô"},
        {"value": "education", "text": "Podnie≈õƒá kwalifikacje i wykszta≈Çcenie"}
      ]
    }
  ];

  // Usu≈Ñ istniejƒÖce pytania
  await prisma.testQuestion.deleteMany({});
  
  let createdCount = 0;
  for (const question of basicQuestions) {
    try {
      await prisma.testQuestion.create({
        data: {
          id: question.id,
          questionText: question.questionText,
          questionType: question.questionType,
          category: question.category,
          subcategory: question.subcategory || null,
          options: question.options || null,
          hollandDimension: question.hollandDimension || null,
          competencyArea: question.competencyArea || null,
          orderIndex: question.orderIndex,
          isActive: true
        }
      });
      createdCount++;
      console.log(`‚úÖ Utworzono podstawowe pytanie: ${question.id}`);
    } catch (error) {
      console.error(`‚ùå B≈ÇƒÖd przy tworzeniu pytania ${question.id}:`, error.message);
    }
  }
  
  console.log(`‚úÖ Utworzono ${createdCount} podstawowych pyta≈Ñ`);
  return { success: true, created: createdCount, errors: 0, fallback: true };
}

async function main() {
  try {
    const result = await seedTestQuestions();
    
    if (result.success) {
      console.log('\nüöÄ SUCCESS: Baza danych zosta≈Ça zaktualizowana!');
      console.log(`üìä Utworzono: ${result.created} pyta≈Ñ`);
      
      if (result.fallback) {
        console.log('\n‚ö†Ô∏è UWAGA: U≈ºyto podstawowych pyta≈Ñ (fallback)');
        console.log('üí° Aby uzyskaƒá pe≈Çny zestaw 32 pyta≈Ñ:');
        console.log('   1. Skopiuj zawarto≈õƒá "paste-6.txt" jako "test-questions.json"');
        console.log('   2. Uruchom ponownie: npm run db:seed-tests');
      } else {
        console.log('\nüî• Nowe funkcje dostƒôpne:');
        console.log('   ‚Ä¢ Rozszerzone pytania testowe');
        console.log('   ‚Ä¢ Szczeg√≥≈Çowa analiza kompetencji');
        console.log('   ‚Ä¢ Realistyczne rekomendacje zawod√≥w');
      }
    } else {
      console.log('\n‚ùå SEEDOWANIE NIEUDANE');
    }
    
  } catch (error) {
    console.error('\nüíÄ SEEDOWANIE NIEUDANE:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Uruchom tylko je≈õli skrypt jest wywo≈Çany bezpo≈õrednio
if (require.main === module) {
  main();
}

module.exports = { seedTestQuestions };